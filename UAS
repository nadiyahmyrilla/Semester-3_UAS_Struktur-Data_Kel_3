#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
//===================DOUBLE LINKED LIST=============================
struct node {
    int id;                
    char judul[100];
    char artis[100];
    int durasi;             // Durasi Lagu (dalam detik)
    int tahunRilis;
    struct node *left;
    struct node *right;
};
typedef struct node node;

void tambahAwal(node **head);
void tambahData(node **head);
void tambahAkhir(node **head);
void hapusAwal(node **head);
void hapusData(node **head);
void hapusAkhir(node **head);
void totalData(node **head);
void totalValue(node **head);
void cariData(node **head);
void tranverse(node *head);
//==================================================================
//===================QUEUE==========================================
typedef struct queueNode {
    int id;                 
    char judul[100];        
    char artis[100];       
    int durasi;             
    int tahunRilis;        
    struct queueNode *next;  
} queueNode;

typedef struct {
    queueNode *front;          
    queueNode *rear;           
    int count;                
    int maxSize;               
} queue;

//fungsi untuk queue
queue createQueue(int maxSize);
queueNode* findLaguById(node *head, int id);
int enqueue(int idlagu, node *head, queue *myQueue);
void dequeue(queue *myQueue);
void display(queue myQueue);

//==================================================================
//===================STACK==========================================
typedef struct nodeStack { 
    queueNode* song;
    struct nodeStack* next;
} nodeStack;

typedef struct Stack {
    nodeStack* top;
} Stack;

Stack stack;

//fungsi stack
void createStack(int size);
bool isFull();
void push(queueNode* newSong);
bool isEmpty();
void pop();
void stackTop();
int stackCount();
void destroyStack();
void printStack();
//==================================================================
//====================DATA UTAMA====================================
int main() {
	node *head = NULL;
	char pilih; 

	head = NULL;
	do{
		system("cls");
		printf("================MENU UTAMA==================\n");
		printf("Masukkan Apa Yang Ingin Dilakukan\n");
		printf("1. Daftar Lagu\n");
		printf("2. Daftar Putar Lagu\n");
		printf("3. Memutar Lagu\n");
		printf("MASUKKAN PILIHAN (tekan q untuk logout) : ");
		fflush(stdin); scanf("%c", &pilih);
		if (pilih == '1'){
			head = NULL;
			do{
				system("cls");
				printf("---------MENU DAFTAR LAGU-----------------\n");
				printf("1. Tambah lagu diawal\n");
				printf("2. Tambah lagu ditengah daftar\n");
				printf("3. Tambah lagu diakhir\n");
				printf("4. Hapus lagu diawal\n");
				printf("5. Hapus lagu ditengah daftar\n");
				printf("6. Hapus lagu diakhir\n");
				printf("7. Total jumlah lagu\n");
				printf("8. Mencari lagu didalam daftar\n");
				printf("9. cetak isi daftar lagu\n");
				printf("MASUKKAN PILIHAN (tekan q untuk logout) : ");
				fflush(stdin); scanf("%c", &pilih);
				if (pilih == '1')
					tambahAwal(&head);
				else if (pilih == '2')
					tambahData(&head);
				else if (pilih == '3')
					tambahAkhir(&head);
				else if (pilih == '4')
					hapusAwal(&head);
				else if (pilih == '5')
					hapusData(&head);
				else if (pilih == '6')
					hapusAkhir(&head);
				else if (pilih == '7')
					totalData(&head);
				else if (pilih == '8')
					cariData(&head);
				else if (pilih == '9'){
					tranverse(head);
				    getch();
				} else {
		                    printf("\nInvalid Choice\n");
		                }
			} while (pilih != 'q');
	        } else if (pilih == '2'){
			int success = 0;
			int maxSize;
			int num;
            int idlagu;
			
			printf("Masukkan kapasitas maksimum daftar putar lagu: ");
			scanf("%d", &maxSize);
			getchar();
			
			queue myQueue = createQueue(maxSize);
			
			do {
				    system("cls");
                    printf("\n-----MENU DAFTAR PUTAR-----\n");
                    printf("\n1. Menambah daftar putar lagu");
                    printf("\n2. Menghapus daftar putar lagu");
                    printf("\n3. Display daftar putar lagu");
                    printf("\n4. Menghapus seluruh daftar putar lagu"); 
                    printf("\n5. Cari Lagu di Daftar Putar (findMyLagu)"); 
                    printf("\nMasukan pilihan (gunakan 'q' untuk exit): ");
                    scanf(" %c", &pilih);
                    if (pilih == '1') {
                        printf("\nMasukkan ID Lagu yang ingin ditambahkan: ");
                        if (scanf("%d", &idlagu) != 1) { 
                            printf("Input ID lagu tidak valid!\n");
                            continue;
                        }
                        if (enqueue(idlagu, head, &myQueue)) { 
                            printf("Lagu berhasil ditambahkan ke daftar putar.\n");
                        } else {
                            printf("Gagal menambahkan lagu ke daftar putar.\n");
                        }getch();
                    } else if (pilih == '2') {
                        dequeue(&myQueue);  
                        getch();
                    } else if (pilih == '3') {
                        display(myQueue); 
                        getch();
                    } else if (pilih == '4') { 
                        destroy(&myQueue);
                        getch();
                    } else if (pilih == '5') { 
                        queueNode(myQueue);
                        getch();
                    } 
                     
			} while (pilih != 'q');
		} else if (pilih == '3'){
			head = NULL;
			do{
				system("cls");
				printf("---------MENU PUTAR LAGU-----------------\n");
				printf("1. Melompat ke lagu\n");
				printf("2. Memutar lagu\n");
				printf("3. Tampilkan jumlah daftar putar lagu\n");
				printf("4. Menghapus seluruh daftar putar lagu\n");
				printf("5. Menampilkan seluruh daftar putar lagu\n");
				printf("MASUKKAN PILIHAN (tekan q untuk logout) : ");
				fflush(stdin); scanf("%c", &pilih);
				if (pilih == '1')
					pop();
				else if (pilih == '2')
					stackTop();
				else if (pilih == '3')
					stackCount();
				else if (pilih == '4')
					destroyStack();
				else if (pilih == '5'){
					printStack();
				    	getch();
				} else {
		                    	printf("\nInvalid Choice\n");
		                }
			} while (pilih != 'q');
		} else {
			printf("\nInvalid Choice\n");
	        }
	} while (pilih != 'q');
  
	return 0;
}
//================================================================
//===================DOUBLE LINKED LIST=============================
// Fungsi untuk menambahkan data di awal linked list
void tambahAwal(node **head) {
    node *pNew = (node *)malloc(sizeof(node));
    
    printf("Masukkan ID Lagu: ");
    scanf("%d", &pNew->id);
    getchar();
    
    printf("Masukkan Judul Lagu: ");
    fgets(pNew->judul, sizeof(pNew->judul), stdin);
    pNew->judul[strcspn(pNew->judul, "\n")] = 0;  // Menghilangkan newline
    
    printf("Masukkan Nama Artis: ");
    fgets(pNew->artis, sizeof(pNew->artis), stdin);
    pNew->artis[strcspn(pNew->artis, "\n")] = 0;

    printf("Masukkan Durasi Lagu (dalam detik): ");
    scanf("%d", &pNew->durasi);
    
    printf("Masukkan Tahun Rilis: ");
    scanf("%d", &pNew->tahunRilis);
    
    pNew->right = *head;
    pNew->left = NULL;
    if (*head != NULL) {
        (*head)->left = pNew;
    }
    *head = pNew;
}

// Fungsi untuk menambahkan data di posisi tertentu dalam linked list
void tambahData(node **head) {
    int pos, count = 1;
    node *pCur = *head;
    node *pNew = (node *)malloc(sizeof(node));
    
    printf("Masukkan posisi untuk menambah data lagu: ");
    scanf("%d", &pos);
    
    printf("Masukkan ID Lagu: ");
    scanf("%d", &pNew->id);
    getchar();
    
    printf("Masukkan Judul Lagu: ");
    fgets(pNew->judul, sizeof(pNew->judul), stdin);
    pNew->judul[strcspn(pNew->judul, "\n")] = 0;
    
    printf("Masukkan Nama Artis: ");
    fgets(pNew->artis, sizeof(pNew->artis), stdin);
    pNew->artis[strcspn(pNew->artis, "\n")] = 0;

    printf("Masukkan Durasi Lagu (dalam detik): ");
    scanf("%d", &pNew->durasi);
    
    printf("Masukkan Tahun Rilis: ");
    scanf("%d", &pNew->tahunRilis);

    pNew->right = NULL;
    pNew->left = NULL;

    if (pos == 1) {
        pNew->right = *head;
        if (*head != NULL) {
            (*head)->left = pNew;
        }
        *head = pNew;
        return;
    }
    while (pCur != NULL && count < pos - 1) {
        pCur = pCur->right;
        count++;
    }
    if (pCur == NULL) {
        printf("Posisi tidak valid, menambah data lagu di akhir.\n");
        while (pCur->right != NULL) {
            pCur = pCur->right;
        }
        pCur->right = pNew;
        pNew->left = pCur;
    } else {
        pNew->right = pCur->right;
        pCur->right = pNew;
        pNew->left = pCur;
        if (pNew->right != NULL) {
            pNew->right->left = pNew;
        }
    }
}

// Fungsi untuk menambahkan data di akhir linked list
void tambahAkhir(node **head) {
    node *pNew = (node *)malloc(sizeof(node));
    node *pCur = *head;
    
    printf("Masukkan ID Lagu: ");
    scanf("%d", &pNew->id);
    getchar(); // Menghapus newline setelah input ID
    
    printf("Masukkan Judul Lagu: ");
    fgets(pNew->judul, sizeof(pNew->judul), stdin);
    pNew->judul[strcspn(pNew->judul, "\n")] = 0;

    printf("Masukkan Nama Artis: ");
    fgets(pNew->artis, sizeof(pNew->artis), stdin);
    pNew->artis[strcspn(pNew->artis, "\n")] = 0;

    printf("Masukkan Durasi Lagu (dalam detik): ");
    scanf("%d", &pNew->durasi);
    
    printf("Masukkan Tahun Rilis: ");
    scanf("%d", &pNew->tahunRilis);
    
    pNew->right = NULL;
    
    if (*head == NULL) {
        *head = pNew;
        pNew->left = NULL;
    } else {
        while (pCur->right != NULL) {
            pCur = pCur->right;
        }
        pCur->right = pNew;
        pNew->left = pCur;
    }
}

// Fungsi untuk menghapus data di awal linked list
void hapusAwal(node **head) {
    node *pCur;
    
    if (*head == NULL) {
        printf("Daftar lagu kosong.\n");
        return;
    }
    pCur = *head;
    *head = pCur->right;
    if (*head != NULL) {
        (*head)->left = NULL;
    }
    
    free(pCur);
    printf("Data lagu di awal berhasil dihapus.\n");
}

// Fungsi untuk menghapus data di posisi tertentu dalam linked list
void hapusData(node **head) {
    int pos, count = 1;
    node *pCur = *head;
    node *pPrev = NULL;
    
    printf("Masukkan posisi data lagu yang ingin dihapus: ");
    scanf("%d", &pos);

    if (pos == 1) {
        hapusAwal(head);
        return;
    }
    while (pCur != NULL && count < pos) {
        pPrev = pCur;
        pCur = pCur->right;
        count++;
    }
    if (pCur == NULL) {
        printf("Posisi tidak ditemukan.\n");
        return;
    }
    pPrev->right = pCur->right;
    if (pCur->right != NULL) {
        pCur->right->left = pPrev;
    }

    free(pCur);
    printf("Data lagu di posisi %d berhasil dihapus.\n", pos);
}

// Fungsi untuk menghapus data di akhir linked list
void hapusAkhir(node **head) {
    node *pCur = *head;
    
    if (*head == NULL) {
        printf("Daftar lagu kosong.\n");
        return;
    }
    if (pCur->right == NULL) {
        free(pCur);
        *head = NULL;
    } else {
        while (pCur->right != NULL) {
            pCur = pCur->right;
        }
        pCur->left->right = NULL;
        free(pCur);
    }
    
    printf("Data di akhir berhasil dihapus.\n");
}

// Fungsi untuk menghitung total data di linked list
void totalData(node **head) {
    node *pCur = *head;
    int count = 0;
    
    while (pCur != NULL) {
        count++;
        pCur = pCur->right;
    }
    printf("Jumlah daftar lagu: %d\n", count);
}

// Fungsi untuk mencari data berdasarkan ID
void cariData(node **head) {
    int targetID;
    node *pCur = *head;
    
    printf("Masukkan ID Lagu yang ingin dicari: ");
    scanf("%d", &targetID);
    
    while (pCur != NULL) {
        if (pCur->id == targetID) {
            printf("\nLagu ditemukan:\n");
            printf("ID: %d\n", pCur->id);
            printf("Judul: %s\n", pCur->judul);
            printf("Artis: %s\n", pCur->artis);
            printf("Durasi: %d detik\n", pCur->durasi);
            printf("Tahun Rilis: %d\n", pCur->tahunRilis);
            return;
        }
        pCur = pCur->right;
    }
    
    printf("Lagu dengan ID %d tidak ditemukan.\n", targetID);
}

// Fungsi untuk menampilkan seluruh daftar lagu
void tranverse(node *head) {
    node *pCur = head;
    if (pCur == NULL) {
        printf("Daftar lagu kosong.\n");
    } else {
        printf("Daftar Lagu:\n");
        while (pCur != NULL) {
            printf("ID: %d\n", pCur->id);
            printf("Judul: %s\n", pCur->judul);
            printf("Artis: %s\n", pCur->artis);
            printf("Durasi: %d detik\n", pCur->durasi);
            printf("Tahun Rilis: %d\n", pCur->tahunRilis);
            printf("---------------------------\n");
            pCur = pCur->right;
        }
    }
}
//==================================================================
//===========================QUEUUE==================================
// Fungsi untuk membuat queue
queue createQueue(int maxSize) {
    queue myQueue;
    myQueue.count = 0;
    myQueue.maxSize = maxSize;
    myQueue.front = myQueue.rear = NULL;    
    return myQueue;
}
// Fungsi untuk mencari lagu di dalam queue (findMyLagu) berdasarkan ID
void findMyLagu(queue myQueue) {
    int targetID;
    queueNode *pCur = myQueue.front;

    printf("\n--- Cari Lagu di Daftar Putar ---\n");
    printf("Masukkan ID Lagu yang ingin dicari: ");
    scanf("%d", &targetID);

    while (pCur != NULL) {
        if (pCur->id == targetID) {
            return; 
        }
        pCur = pCur->next;
    }

    printf("Lagu dengan ID %d tidak ditemukan.\n", targetID);
}

// Fungsi untuk mencari lagu berdasarkan ID di linked list
queueNode* findLaguById(node *head, int id) {
    node *current = head;
    while (current != NULL) {
        if (current->id == id) {
            queueNode *qNode = (queueNode *)malloc(sizeof(queueNode));
            qNode->id = current->id;
            strcpy(qNode->judul, current->judul);
            strcpy(qNode->artis, current->artis);
            qNode->durasi = current->durasi;
            qNode->tahunRilis = current->tahunRilis;
            qNode->next = NULL;
            return qNode;
        }
        current = current->right;
    }
    return NULL;
}

// Fungsi untuk menambahkan elemen ke dalam queue (enqueue)
int enqueue(int idlagu, node *head, queue *myQueue) {
    if (myQueue->count >= myQueue->maxSize) {
        printf("Playlist penuh! Tidak bisa menambahkan lagu.\n");
        return 0; 
    }

    // Cari lagu berdasarkan ID di linked list
    queueNode *lagu = findLaguById(head, idlagu);                           
    if (lagu == NULL) {
        printf("Lagu dengan ID %d tidak ditemukan!\n", idlagu);
        return 0; 
    }
    
    if (myQueue->count == 0) {
        myQueue->front = myQueue->rear = lagu;
    } else{
        myQueue->rear->next = lagu;
        myQueue->rear = lagu; 
    }

    myQueue->count++; 
    return 1; 
}

/// Fungsi untuk menghapus lagu dari queue (dequeue)
void dequeue(queue *myQueue) {
    if (myQueue->count == 0) {
        printf("Playlist kosong! Tidak ada lagu untuk dihapus.\n");
        return;
    }
    queueNode *temp = myQueue->front;
    myQueue->front = myQueue->front->next;
    free(temp); 

    myQueue->count--; 

    if (myQueue->count == 0) {
        myQueue->rear = NULL; 
    }
    printf("lagu berhasil di hapus dari playlist.\n");
}

// Fungsi untuk menampilkan semua lagu di queue
void display(queue myQueue) {
    if (myQueue.count == 0) {
        printf("Daftar putar lagu kosong.\n");
        return;
    }

    printf("\n--- Daftar Putar Lagu ---\n");
    queueNode *temp = myQueue.front;
    while (temp != NULL) { 
        printf("ID: %d\n", temp->id);
        printf("Judul: %s\n", temp->judul);
        printf("Artis: %s\n", temp->artis);                                                   
        printf("Durasi: %d detik\n", temp->durasi);
        printf("Tahun Rilis: %d\n", temp->tahunRilis);
        printf("-------------------\n");
        temp = temp->next; 
    }
    printf("\n");
}

//menghapus seluruh antrian
void destroy(queue *myQueue) {
    while (myQueue->front != NULL) {
        dequeue(myQueue);
    }
    printf("Tidak ada daftar putar lagu\n");
}
//======================================================================
//=============================STACK====================================
//fungsi untuk membuat stack
void createStack(int size) {
    stack.top = NULL; // Stack dimulai dengan keadaan kosong
}

//Memeriksa apakah stack kosong
bool isEmpty() {
    return stack.top == NULL; // Mengecek apakah stack kosong
}

//menerima pointer ke lagu dari myQueue dan menambahkannya ke stack
void push(queueNode* newLagu) {
    nodeStack* newNode = (nodeStack*)malloc(sizeof(nodeStack));
    if (newNode == NULL) {
        printf("Alokasi memori gagal!\n");
        return;
    }
    newNode->song = newLagu;
    newNode->next = stack.top;
    stack.top = newNode;
}

//Menghapus lagu di top stack (lagu telah diputar)
void pop() {
    if (isEmpty()) {
        printf("Stack kosong!\n");
        return;
    }
    
    nodeStack* temp = stack.top;
    
    // Tampilkan informasi lagu yang sedang diputar
    printf("Anda sedang melompat ke lagu ini:\n");
    printf("ID: %d\n", temp->song->id);
    printf("Judul: %s\n", temp->song->judul);
    printf("Artis: %s\n", temp->song->artis);
    printf("Durasi: %d detik\n", temp->song->durasi);
    printf("Tahun Rilis: %d\n", temp->song->tahunRilis);
    
    // Pindahkan top stack ke node berikutnya
    stack.top = stack.top->next;
    free(temp);
}

//Menampilkan lagu yang ada dibagian atas stack
void stackTop() {
    if (isEmpty()) {
        printf("Stack kosong!\n");
        return;
    }
    printf("Lagu sedang diputar:\n");
    printf("ID: %d\n", stack.top->song->id);
    printf("Judul: %s\n", stack.top->song->judul);
    printf("Artis: %s\n", stack.top->song->artis);
    printf("Durasi: %d detik\n", stack.top->song->durasi);
    printf("Tahun Rilis: %d\n", stack.top->song->tahunRilis);
    pop(); //menghapus setelah ditampilkan
}

//Menghitung jumlah lagu yang ada di stack
int stackCount() {
    int count = 0;
    nodeStack* current = stack.top;
    while (current != NULL) {
        count++;
        current = current->next;
    }
    return count;
}

//Menghapus seluruh isi stack
void destroyStack() {
    while (!isEmpty()) {
        pop(); // Pop setiap elemen hingga stack kosong
    }
}

//Menampilkan seluruh lagu di stack
void printStack() {
    if (isEmpty()) {
        printf("Stack kosong!\n");
        return;
    }

    nodeStack* current = stack.top;
    printf("Lagu-lagu yang akan diputar:\n");
    
    while (current != NULL) {
        printf("ID: %d,", current->song->id);
        printf("Judul: %s\n", current->song->judul);
        current = current->next;
    }
}
//======================================================================
